<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <Version>1.1.0</Version>
  </PropertyGroup>

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <Nullable>enable</Nullable>
    <WarningsAsErrors>CS8618;CS8600;CS8602;CS8603</WarningsAsErrors>

    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
    <TypeScriptToolsVersion>Latest</TypeScriptToolsVersion>

    <IsPackable>false</IsPackable>
    <SpaSource>../client-app/</SpaSource>
    <SpaDist>ClientApp/</SpaDist>
    <DefaultItemExcludes>$(DefaultItemExcludes);$(SpaRoot)node_modules\**</DefaultItemExcludes>
    <RuntimeIdentifiers>win-x64</RuntimeIdentifiers>
  </PropertyGroup>

  <PropertyGroup>
    <!-- Don't show built SPA files in VS if they are present locally -->
    <DefaultItemExcludes>$(DefaultItemExcludes);ClientApp/**</DefaultItemExcludes>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="AutoMapper.Extensions.Microsoft.DependencyInjection" Version="7.0.0" />
    <PackageReference Include="Base62-Net" Version="1.1.0" />
    <PackageReference Include="ClacksMiddlware" Version="2.1.0" />
    <PackageReference Include="LiteDB" Version="5.0.1" />
    <PackageReference Include="Microsoft.AspNetCore.Mvc.NewtonsoftJson" Version="3.1.1" />
    <PackageReference Include="Microsoft.AspNetCore.SpaServices.Extensions" Version="3.1.1" />
    <PackageReference Include="Newtonsoft.Json.Bson" Version="1.0.2" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="5.0.0" />
    <PackageReference Include="Swashbuckle.AspNetCore.Annotations" Version="5.0.0" />
    <PackageReference Include="Swashbuckle.AspNetCore.Newtonsoft" Version="5.0.0" />
    <PackageReference Include="UoN.AspNetCore.VersionMiddleware" Version="1.1.1" />
    <PackageReference Include="UoN.VersionInformation.DependencyInjection" Version="1.0.0" />
    <PackageReference Include="UoN.ZipBuilder" Version="1.0.0" />
  </ItemGroup>

  <ItemGroup>
    <None Update="components\**">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
    <None Update="surveys\**">
      <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <None Update="version.txt">
      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Folder Include="Repositories\Contracts\" />
    <Folder Include="wwwroot\" />
  </ItemGroup>

  <Target Name="DebugEnsureNodeEnv" BeforeTargets="Build" Condition=" '$(Configuration)' == 'Debug' And !Exists('$(SpaRoot)node_modules') ">
    <!-- Ensure Node.js is installed -->
    <Exec Command="node --version" ContinueOnError="true">
      <Output TaskParameter="ExitCode" PropertyName="ErrorCode" />
    </Exec>
    <Error Condition="'$(ErrorCode)' != '0'" Text="Node.js is required to build and run this project. To continue, please install Node.js from https://nodejs.org/, and then restart your command prompt or IDE." />
    <Message Importance="high" Text="Restoring dependencies using 'npm'. This may take several minutes..." />

    <!-- npm install for the SPA on Debug runs, in case it hasn't been done outside VS/dotnet -->
    <Exec WorkingDirectory="$(SpaSource)" Command="npm install" />
  </Target>

  <Target Name="PublishIncludeSpaBuild" AfterTargets="ComputeFilesToPublish">
    <!-- 
    Unlike the ASP.NET Core Template, which runs the Webpack build on publish,
    we do the client app build independently in parallel during CI.
    So this process appears more manual (but is automated in CI instead).
    
    The resulting publish steps are therefore:
    1. `npm run build` in `$(SpaSource)`
    2. Copy the built output from `$(SpaSource)/build` to `$(SpaDist)`
         - in CI this looks like the artifact output from step 1
           being downloaded to $(SpaDist) in the working directory for step 3
    3. `dotnet publish`, which will run this Target
       and include the files from `$(SpaDist)` in the publish output
       
    CI should therefore take care of the build steps, and copying the output
    to the right place before publishing.
    -->

    <!-- Include the SPA build files in the publish output -->
    <ItemGroup>
      <DistFiles Include="$(SpaDist)**" />
      <ResolvedFileToPublish Include="@(DistFiles->'%(FullPath)')" Exclude="@(ResolvedFileToPublish)">
        <RelativePath>%(DistFiles.Identity)</RelativePath>
        <CopyToPublishDirectory>PreserveNewest</CopyToPublishDirectory>
      </ResolvedFileToPublish>
    </ItemGroup>
  </Target>

</Project>
