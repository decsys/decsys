trigger:
  - master

variables:
  buildConfiguration: "Release"

jobs:
  - job: build_the_docs
    displayName: "Build the docs"

    pool:
      vmImage: "Ubuntu-16.04"

    container:
      image: beforan/mkdocs-material-az-pipelines

    steps:
    - script: mkdocs build

  # - job: build
  #   pool:
  #     vmImage: "Ubuntu-16.04"

  #   steps:
  #     # Load project metadata
  #     - task: LoadJsonVariables@1
  #       displayName: "Load package.json data"
  #       inputs:
  #         JsonSource: "./Decsys/ClientApp/package.json"
  #         VariablePrefix: "pkg"
  #     - task: LoadXmlVariables@1
  #       displayName: "Load .csproj data"
  #       inputs:
  #         XmlSource: "./Decsys/Decsys.csproj"
  #         VariablePrefix: "csproj"
  #     - script: echo '##vso[task.setvariable variable=buildVersion;isOutput=true]$(csproj_Project_PropertyGroup_0_Version)'
  #       name: setBuildVersion

  #     # create version.txt
  #     - task: file-creator@5
  #       inputs:
  #         fileoverwrite: true
  #         skipempty: true
  #         filepath: "./Decsys/version.txt"
  #         filecontent: |-
  #           Build=$(Build.BuildNumber)
  #           Client App=$(pkg_version)

  #     # fetch shipping Response Components
  #     - task: DownloadGitHubRelease@0
  #       displayName: "Fetch Latest Ellipse"
  #       inputs:
  #         connection: "decsys-pipelines"
  #         userRepository: "decsys/ellipse-component"
  #         downloadPath: "./Decsys/components/"
  #     - task: DownloadGitHubRelease@0
  #       displayName: "Fetch Latest Likert"
  #       inputs:
  #         connection: "decsys-pipelines"
  #         userRepository: "decsys/likert-component"
  #         downloadPath: "./Decsys/components/"
  #     - task: DownloadGitHubRelease@0
  #       displayName: "Fetch Latest FreeText"
  #       inputs:
  #         connection: "decsys-pipelines"
  #         userRepository: "decsys/freetext-component"
  #         downloadPath: "./Decsys/components/"
  #     - task: DownloadGitHubRelease@0
  #       displayName: "Fetch Latest Confirmation"
  #       inputs:
  #         connection: "decsys-pipelines"
  #         userRepository: "decsys/confirmation-component"
  #         downloadPath: "./Decsys/components/"

  #     # Build the ClientApp
  #     - task: Npm@1
  #       displayName: "npm ci"
  #       inputs:
  #         command: "custom"
  #         workingDir: "./Decsys/ClientApp"
  #         customCommand: "ci"
  #     - task: Npm@1
  #       displayName: "npm run build"
  #       inputs:
  #         command: "custom"
  #         workingDir: "./Decsys/ClientApp"
  #         customCommand: "run build"

  #     # Publish the dotnet app for different targets
  #     - task: DotNetCoreCLI@2
  #       displayName: "dotnet publish"
  #       inputs:
  #         command: "publish"
  #         publishWebProjects: false
  #         projects: "**/*.csproj"
  #         arguments: >
  #           -c $(buildConfiguration) 
  #           -o $(Build.ArtifactStagingDirectory)/dotnet
  #         zipAfterPublish: false
  #     - task: DotNetCoreCLI@2
  #       displayName: "dotnet publish win-x64"
  #       inputs:
  #         command: "publish"
  #         publishWebProjects: false
  #         projects: "**/*.csproj"
  #         arguments: >
  #           -c $(buildConfiguration) 
  #           -o $(Build.ArtifactStagingDirectory)/win-x64 
  #           -r win-x64
  #         zipAfterPublish: false

  #     # Package the releases

  #     # dotnet
  #     - task: CopyFiles@2
  #       displayName: "Copy dotnet bootstrap scripts"
  #       inputs:
  #         SourceFolder: "./scripts/dotnet"
  #         TargetFolder: "$(Build.ArtifactStagingDirectory)/dotnet"
  #     - task: PublishPipelineArtifact@0
  #       displayName: "Publish dotnet artifact"
  #       inputs:
  #         artifactName: "dotnet"
  #         targetPath: "$(Build.ArtifactStagingDirectory)/dotnet"

  #     # win-x64
  #     - task: CopyFiles@2
  #       displayName: "Copy win-x64 bootstrap scripts"
  #       inputs:
  #         SourceFolder: "./scripts/win-x64"
  #         TargetFolder: "$(Build.ArtifactStagingDirectory)/win-x64"
  #     - task: PublishPipelineArtifact@0
  #       displayName: "Publish win-x64 artifact"
  #       inputs:
  #         artifactName: "win-x64"
  #         targetPath: "$(Build.ArtifactStagingDirectory)/win-x64"

  # - deployment: release
  #   pool:
  #     vmImage: "Ubuntu-16.04"

  #   dependsOn: "build"
  #   condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  #   environment: github

  #   variables:
  #     buildVersion: $[ dependencies.build.outputs['setBuildVersion.buildVersion'] ]

  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #           # artifact acquisition
  #           - task: DownloadPipelineArtifact@1
  #             displayName: "Fetch dotnet artifact"
  #             inputs:
  #               artifactName: "dotnet"
  #               downloadPath: "$(System.ArtifactsDirectory)/dotnet"
  #           - task: DownloadPipelineArtifact@1
  #             displayName: "Fetch win-x64 artifact"
  #             inputs:
  #               artifactName: "win-x64"
  #               downloadPath: "$(System.ArtifactsDirectory)/win-x64"

  #           # artifact archiving
  #           - task: ArchiveFiles@2
  #             displayName: "Zip dotnet artifact"
  #             inputs:
  #               rootFolderOrFile: "$(System.ArtifactsDirectory)/dotnet"
  #               includeRootFolder: false
  #               archiveFile: "$(Build.BinariesDirectory)/Decsys_$(buildVersion)_dotnet-2.2.zip"
  #           - task: ArchiveFiles@2
  #             displayName: "Zip win-x64 artifact"
  #             inputs:
  #               rootFolderOrFile: "$(System.ArtifactsDirectory)/win-x64"
  #               includeRootFolder: false
  #               archiveFile: "$(Build.BinariesDirectory)/Decsys_$(buildVersion)_win-x64.zip"

  #           # Publish Draft GitHub Release
  #           - task: GitHubRelease@0
  #             inputs:
  #               gitHubConnection: "decsys-pipelines"
  #               repositoryName: "decsys/decsys"
  #               action: "create"
  #               tagSource: "manual"
  #               tag: "$(buildVersion)"
  #               releaseNotesSource: "input"
  #               releaseNotes: "`// TODO`"
  #               isDraft: true
  #               assets: "$(Build.BinariesDirectory)/*.zip"
