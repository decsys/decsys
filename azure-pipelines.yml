trigger:
- master

variables:
  buildConfiguration: 'Release'

jobs:

- job: build
  pool:
    vmImage: 'Ubuntu-16.04'
  
  steps:
  # Load project metadata
  - task: LoadJsonVariables@1
    displayName: 'Load package.json data'
    inputs:
      JsonSource: './Decsys/ClientApp/package.json'
      VariablePrefix: 'pkg'
  - task: LoadXmlVariables@1
    displayName: 'Load .csproj data'
    inputs:
      XmlSource: './Decsys/Decsys.csproj'
      VariablePrefix: 'csproj'

  # create version.txt
  - task: file-creator@5
    inputs:
      fileoverwrite: true
      skipempty: true
      filepath: './Decsys/version.txt'
      filecontent: |-
        Build=$(Build.BuildNumber)
        Client App=$(pkg_version)

  # fetch shipping Response Components
  - task: DownloadGitHubRelease@0
    displayName: 'Fetch Latest Ellipse'
    inputs:
      connection: 'decsys-pipelines'
      userRepository: 'decsys/ellipse-component'
      downloadPath: './Decsys/components/'
  - task: DownloadGitHubRelease@0
    displayName: 'Fetch Latest Likert'
    inputs:
      connection: 'decsys-pipelines'
      userRepository: 'decsys/likert-component'
      downloadPath: './Decsys/components/'
  - task: DownloadGitHubRelease@0
    displayName: 'Fetch Latest FreeText'
    inputs:
      connection: 'decsys-pipelines'
      userRepository: 'decsys/freetext-component'
      downloadPath: './Decsys/components/'
  - task: DownloadGitHubRelease@0
    displayName: 'Fetch Latest Confirmation'
    inputs:
      connection: 'decsys-pipelines'
      userRepository: 'decsys/confirmation-component'
      downloadPath: './Decsys/components/'

  # Build the ClientApp
  - task: Npm@1
    displayName: 'npm ci'
    inputs:
      command: 'custom'
      workingDir: './Decsys/ClientApp'
      customCommand: 'ci'
  - task: Npm@1
    displayName: 'npm run build'
    inputs:
      command: 'custom'
      workingDir: './Decsys/ClientApp'
      customCommand: 'run build'

  # Publish the dotnet app for different targets
  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '**/*.csproj'
      arguments: >
        -c $(buildConfiguration) 
        -o $(Build.ArtifactStagingDirectory)/dotnet
  - task: DotNetCoreCLI@2
    displayName: 'dotnet publish win-x64'
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '**/*.csproj'
      arguments: >
        -c $(buildConfiguration) 
        -o $(Build.ArtifactStagingDirectory)/win-x64 
        -r win-x64

  # Package the releases

  # dotnet
  - task: CopyFiles@2
    inputs:
      SourceFolder: './scripts/dotnet'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/dotnet'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'dotnet'
      targetPath: '$(Build.ArtifactStagingDirectory)/dotnet'

  # win-x64
  - task: CopyFiles@2
    inputs:
      SourceFolder: './scripts/dotnet'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/win-x64'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'dotnet'
      targetPath: '$(Build.ArtifactStagingDirectory)/win-x64'