trigger:
  - master

variables:
  buildConfiguration: "Release"

stages:
- stage: build
  displayName: Build
  jobs:
    
    # ---
    # Load Metadata
    # ---
    - job: load_metadata
      displayName: "Load Metadata"
      pool:
        vmImage: "Ubuntu-16.04"

      steps:
      # load metadata from project files
      - task: LoadJsonVariables@1
        displayName: "Load package.json data"
        inputs:
          JsonSource: "./Decsys/ClientApp/package.json"
          VariablePrefix: "pkg"
      - task: LoadXmlVariables@1
        displayName: "Load .csproj data"
        inputs:
          XmlSource: "./Decsys/Decsys.csproj"
          VariablePrefix: "csproj"
      
      # set variables for use elsewhere
      - script: echo '##vso[task.setvariable variable=apiVersion;isOutput=true]$(csproj_Project_PropertyGroup_0_Version)'
        name: setApiVersion
      - script: echo '##vso[task.setvariable variable=clientVersion;isOutput=true]$(pkg_version)'
        name: setClientVersion

    # ---
    # Create Version file
    # ---
    - job: version_file
      displayName: "Create Version file"
      pool:
        vmImage: "Ubuntu-16.04"
      dependsOn: load_metadata

      variables:
        clientVersion: $[ dependencies.load_metadata.outputs['setClientVersion.clientVersion'] ]

      steps:
      - task: file-creator@5
        inputs:
          fileoverwrite: true
          skipempty: true
          filepath: "$(Build.ArtifactStagingDirectory)/version.txt"
          filecontent: |-
            Build=$(Build.BuildNumber)
            Client App=$(clientVersion)
      - task: PublishPipelineArtifact@0
        displayName: "Publish version file"
        inputs:
          artifactName: "version"
          targetPath: "$(Build.ArtifactStagingDirectory)"
    
    # ---
    # Build Docs
    # ---
    - job: docs
      displayName: "Docs"
      pool:
        vmImage: "Ubuntu-16.04"

      steps:
      - script: >
          docker run --rm
          -v $(System.DefaultWorkingDirectory):/docs
          -v $(Build.ArtifactStagingDirectory):/docs-out
          squidfunk/mkdocs-material
          build -c -s -v -d /docs-out
      - task: PublishPipelineArtifact@0
        displayName: "Publish docs"
        inputs:
          artifactName: "docs"
          targetPath: "$(Build.ArtifactStagingDirectory)"
    
    # ---
    # Fetch Shipping Response Components
    # ---
    - job: fetch_components
      displayName: Fetch Shipping components
      pool:
        vmImage: "Ubuntu-16.04"

      steps:
      - checkout: none
      - task: DownloadGitHubRelease@0
        displayName: "Fetch Latest Ellipse"
        inputs:
          connection: "decsys-pipelines"
          userRepository: "decsys/ellipse-component"
          downloadPath: "$(Build.ArtifactStagingDirectory)"
      - task: DownloadGitHubRelease@0
        displayName: "Fetch Latest Likert"
        inputs:
          connection: "decsys-pipelines"
          userRepository: "decsys/likert-component"
          downloadPath: "$(Build.ArtifactStagingDirectory)"
      - task: DownloadGitHubRelease@0
        displayName: "Fetch Latest FreeText"
        inputs:
          connection: "decsys-pipelines"
          userRepository: "decsys/freetext-component"
          downloadPath: "$(Build.ArtifactStagingDirectory)"
      - task: DownloadGitHubRelease@0
        displayName: "Fetch Latest Confirmation"
        inputs:
          connection: "decsys-pipelines"
          userRepository: "decsys/confirmation-component"
          downloadPath: "$(Build.ArtifactStagingDirectory)"
      - task: PublishPipelineArtifact@0
        displayName: "Publish components"
        inputs:
          artifactName: "components"
          targetPath: "$(Build.ArtifactStagingDirectory)"

    # ---
    # Build the Client App
    # ---
    - job: clientapp
      displayName: "Client App"
      pool:
        vmImage: "Ubuntu-16.04"

      variables:
        baseDir: "./Decsys/ClientApp"

      steps:
      - task: Npm@1
        displayName: "npm ci"
        inputs:
          command: "custom"
          workingDir: "$(baseDir)"
          customCommand: "ci"
      - task: Npm@1
        displayName: "npm run build"
        inputs:
          command: "custom"
          workingDir: "$(baseDir)"
          customCommand: "run build"
      - task: PublishPipelineArtifact@0
        displayName: "Publish Client App"
        inputs:
          artifactName: "clientapp"
          targetPath: "$(baseDir)/build"

    # ---
    # Publish the dotnet app for different targets
    # ---
    # - job: publish
    #   displayName: "Publish Dotnet Binaries"
    #   pool:
    #     vmImage: "Ubuntu-16.04"
    #   dependsOn: # literally everything else in this stage
    #   - load_metadata
    #   - version_file
    #   - docs
    #   - fetch_components
    #   - clientapp

# - job: build
  #   pool:
  #     vmImage: "Ubuntu-16.04"

  #     # Publish the dotnet app for different targets
  #     - task: DotNetCoreCLI@2
  #       displayName: "dotnet publish"
  #       inputs:
  #         command: "publish"
  #         publishWebProjects: false
  #         projects: "**/*.csproj"
  #         arguments: >
  #           -c $(buildConfiguration) 
  #           -o $(Build.ArtifactStagingDirectory)/dotnet
  #         zipAfterPublish: false
  #     - task: DotNetCoreCLI@2
  #       displayName: "dotnet publish win-x64"
  #       inputs:
  #         command: "publish"
  #         publishWebProjects: false
  #         projects: "**/*.csproj"
  #         arguments: >
  #           -c $(buildConfiguration) 
  #           -o $(Build.ArtifactStagingDirectory)/win-x64 
  #           -r win-x64
  #         zipAfterPublish: false


  #     # Package the releases

  #     # dotnet
  #     - task: CopyFiles@2
  #       displayName: "Copy dotnet bootstrap scripts"
  #       inputs:
  #         SourceFolder: "./scripts/dotnet"
  #         TargetFolder: "$(Build.ArtifactStagingDirectory)/dotnet"
  #     - task: PublishPipelineArtifact@0
  #       displayName: "Publish dotnet artifact"
  #       inputs:
  #         artifactName: "dotnet"
  #         targetPath: "$(Build.ArtifactStagingDirectory)/dotnet"

  #     # win-x64
  #     - task: CopyFiles@2
  #       displayName: "Copy win-x64 bootstrap scripts"
  #       inputs:
  #         SourceFolder: "./scripts/win-x64"
  #         TargetFolder: "$(Build.ArtifactStagingDirectory)/win-x64"
  #     - task: PublishPipelineArtifact@0
  #       displayName: "Publish win-x64 artifact"
  #       inputs:
  #         artifactName: "win-x64"
  #         targetPath: "$(Build.ArtifactStagingDirectory)/win-x64"

# - stage: release_github
#   displayName: Draft Github Release
#   jobs:
#     - deployment: github
#       pool:
#         vmImage: "Ubuntu-16.04"

#       dependsOn: build
#       condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

#       environment: github

#       # variables:
#       #   buildVersion: $[ dependencies.build.outputs['setBuildVersion.buildVersion'] ]

#       strategy:
#         runOnce:
#           deploy:
#             steps:
#               # artifact acquisition
#               - task: DownloadPipelineArtifact@1
#                 displayName: "Fetch dotnet artifact"
#                 inputs:
#                   artifactName: "dotnet"
#                   downloadPath: "$(System.ArtifactsDirectory)/dotnet"
#               - task: DownloadPipelineArtifact@1
#                 displayName: "Fetch win-x64 artifact"
#                 inputs:
#                   artifactName: "win-x64"
#                   downloadPath: "$(System.ArtifactsDirectory)/win-x64"

#               # artifact archiving
#               - task: ArchiveFiles@2
#                 displayName: "Zip dotnet artifact"
#                 inputs:
#                   rootFolderOrFile: "$(System.ArtifactsDirectory)/dotnet"
#                   includeRootFolder: false
#                   archiveFile: "$(Build.BinariesDirectory)/Decsys_$(buildVersion)_dotnet-2.2.zip"
#               - task: ArchiveFiles@2
#                 displayName: "Zip win-x64 artifact"
#                 inputs:
#                   rootFolderOrFile: "$(System.ArtifactsDirectory)/win-x64"
#                   includeRootFolder: false
#                   archiveFile: "$(Build.BinariesDirectory)/Decsys_$(buildVersion)_win-x64.zip"

#               # Publish Draft GitHub Release
#               - task: GitHubRelease@0
#                 inputs:
#                   gitHubConnection: "decsys-pipelines"
#                   repositoryName: "decsys/decsys"
#                   action: "create"
#                   tagSource: "manual"
#                   tag: "$(buildVersion)"
#                   releaseNotesSource: "input"
#                   releaseNotes: "`// TODO`"
#                   isDraft: true
#                   assets: "$(Build.BinariesDirectory)/*.zip"