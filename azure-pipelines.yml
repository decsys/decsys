# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

stages:
- stage: Build
  jobs:

  - job: dotnet_build
    pool:
      vmImage: 'Ubuntu-16.04'

    variables:
      buildConfiguration: 'Release'

    steps:
    - script: dotnet build -c $(buildConfiguration)
      displayName: 'dotnet build $(buildConfiguration)'

  - job: client_build
    pool:
      vmImage: 'Ubuntu-16.04'
    
    steps:
    - task: Npm@1
      displayName: 'npm ci'
      inputs:
        command: 'custom'
        workingDir: './Decsys/ClientApp'
        customCommand: 'ci'
    - task: Npm@1
      displayName: 'npm run build'
      inputs:
        command: 'custom'
        workingDir: './Decsys/ClientApp'
        customCommand: 'run build'
  
  - job: load_project_metadata
    pool:
      vmImage: 'Ubuntu-16.04'
    
    steps:
    - task: LoadJsonVariables@1
      displayName: 'Load package.json data'
      inputs:
        JsonSource: './Decsys/ClientApp/package.json'
        VariablePrefix: 'pkg'
    - task: LoadXmlVariables@1
      displayName: 'Load .csproj data'
      inputs:
        XmlSource: './Decsys/Decsys.csproj'
        VariablePrefix: 'csproj'
        
  - job: version_file
    pool:
      vmImage: 'Ubuntu-16.04'
    
    dependsOn: load_project_metadata

    steps:
    - task: file-creator@5
      inputs:
        fileoverwrite: true
        skipempty: true
        filepath: './Decsys/version.txt'
        filecontent: 'Build=$(Build.BuildNumber)
Client App=$(pkg_version)'

# Fetch all the shipping Response Components from GitHub
  - job: fetch_shipping_components
    pool:
      vmImage: 'Ubuntu-16.04'

    strategy:
      matrix:
        Ellipse:
          repo: 'ellipse-component'
        Likert:
          repo: 'likert-component'
        Confirmation:
          repo: 'confirmation-component'
        FreeText:
          repo: 'freetext-component'
    
    steps:
    - task: DownloadGitHubRelease@0
      displayName: 'Fetch Latest Release'
      inputs:
        connection: 'decsys-pipelines'
        userRepository: 'decsys/$(repo)'
        downloadPath: './Decsys/components/'

# Now all the building is done, publish the various release outputs
# This could be another stage but there's not much point publishing
# earlier artifacts just to download them again.
# These jobs create the real build artifacts.
  - job: publish
    pool:
      vmImage: 'Ubuntu-16.04'

    dependsOn:
    - dotnet_build
    - client_build
    - version_file
    - fetch_confirmation_component
    - fetch_ellipse_component
    - fetch_freetext_component
    - fetch_likert_component

    variables:
      buildConfiguration: 'Release'

    matrix:
      dotnet:
        runtime: "" # no runtime argument
      win_x64:
        runtime: "-r win-x64" # have to include the -r so dotnet above works

    steps:
    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: 'publish'
        arguments: '--no-build -c $(buildConfiguration) $(runtime)'
