trigger:
  - master
variables:
  buildConfiguration: "Release"
stages:
- stage: Build
  jobs:
    - job: Load_Metadata
      pool:
        vmImage: ubuntu-latest
      steps:
      - task: LoadJsonVariables@1
        displayName: Load package.json data
        inputs:
          JsonSource: ./Decsys/ClientApp/package.json
          VariablePrefix: pkg
      - script: echo '##vso[task.setvariable variable=clientVersion;isOutput=true]$(pkg_version)'
        name: setClientVersion
    - job: Version_File
      pool:
        vmImage: ubuntu-latest
      dependsOn: Load_Metadata
      variables:
        clientVersion: $[ dependencies.load_metadata.outputs['setClientVersion.clientVersion'] ]
      steps:
      - task: file-creator@5
        inputs:
          fileoverwrite: true
          skipempty: true
          filepath: $(Build.ArtifactStagingDirectory)/version.txt
          filecontent: |-
            Build=$(Build.BuildNumber)
            Client App=$(clientVersion)
      - upload: $(Build.ArtifactStagingDirectory)
        artifact: version
    - job: Docs
      pool:
        vmImage: ubuntu-latest
      steps:
      - script: >
          docker run --rm
          -v $(System.DefaultWorkingDirectory):/docs
          -v $(Build.ArtifactStagingDirectory):/docs-out
          squidfunk/mkdocs-material
          build -c -s -v -d /docs-out
      - upload: $(Build.ArtifactStagingDirectory)
        artifact: docs
    - job: Response_Components
      pool:
        vmImage: ubuntu-latest
      steps:
      - checkout: none
      - task: DownloadGitHubRelease@0
        displayName: Fetch Latest Ellipse
        inputs:
          connection: decsys-pipelines
          userRepository: decsys/ellipse-component
          downloadPath: $(Build.ArtifactStagingDirectory)
      - task: DownloadGitHubRelease@0
        displayName: Fetch Latest Likert
        inputs:
          connection: decsys-pipelines
          userRepository: decsys/likert-component
          downloadPath: $(Build.ArtifactStagingDirectory)
      - task: DownloadGitHubRelease@0
        displayName: Fetch Latest FreeText
        inputs:
          connection: decsys-pipelines
          userRepository: decsys/freetext-component
          downloadPath: $(Build.ArtifactStagingDirectory)
      - task: DownloadGitHubRelease@0
        displayName: Fetch Latest Confirmation
        inputs:
          connection: decsys-pipelines
          userRepository: decsys/confirmation-component
          downloadPath: $(Build.ArtifactStagingDirectory)
      - upload:  $(Build.ArtifactStagingDirectory)
        artifact: components
    - job: ClientApp
      pool:
        vmImage: ubuntu-latest
      variables:
        baseDir: ./Decsys/ClientApp
      steps:
      - script: npm ci
        workingDirectory: $(baseDir)
      - script: npm run build
        workingDirectory: $(baseDir)
      - upload: $(baseDir)/build
        artifact: clientapp
    - job: Dotnet
      pool:
        vmImage: ubuntu-latest
      steps:
      - script: dotnet build -c $(buildConfiguration)
        workingDirectory: "Decsys"
- stage: Prepare_Release
  jobs:
    - job: Collate_Artifacts
      pool:
        vmImage: ubuntu-latest
      variables:
        appRoot: $(System.DefaultWorkingDirectory)/Decsys
      steps:
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: components
          downloadPath: $(appRoot)/components
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: version
          downloadPath: $(appRoot)
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: clientapp
          downloadPath: $(appRoot)/ClientApp/build
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: docs
          downloadPath: $(appRoot)/wwwroot/docs
      - upload: ./Decsys
        artifact: prepublish
      - upload: ./scripts
        artifact: scripts
      - upload: ./LICENSE.md
        artifact: licence
    - job: Publish_Binaries
      pool:
        vmImage: ubuntu-latest
      dependsOn: Collate_Artifacts
      strategy:
        maxParallel: 2
        matrix:
          dotnet:
            name: dotnet
            argTargetRuntime: ""
          win64:
            name: win-x64
            argTargetRuntime: -r win-x64
      steps:
      - checkout: none
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: prepublish
          downloadPath: $(System.DefaultWorkingDirectory)/Decsys
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: scripts
          downloadPath: $(System.DefaultWorkingDirectory)/scripts
      - task: DownloadPipelineArtifact@1
        inputs:
          artifactName: licence
          downloadPath: $(Build.ArtifactStagingDirectory)
      - script: >
          dotnet publish
          -c $(buildConfiguration)
          -o $(Build.ArtifactStagingDirectory)
          $(argTargetRuntime)
        workingDirectory: ./Decsys
      - script: cp $(System.DefaultWorkingDirectory)/scripts/$(name) $(Build.ArtifactStagingDirectory)
      - upload: $(Build.ArtifactStagingDirectory)
        artifact: $(name)

# ---
# Release to GitHub
# ---
- stage: release_github
  displayName: Release to GitHub
  # condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  jobs:
    # ---
    # Load Metadata
    # ---
    - job: load_metadata
      displayName: Load Metadata
      pool:
        vmImage: Ubuntu-16.04

      steps:
      # load metadata from project files
      - task: LoadXmlVariables@1
        displayName: Load .csproj data
        inputs:
          XmlSource: ./Decsys/Decsys.csproj
          VariablePrefix: csproj
      # set variables for use elsewhere
      - script: echo '##vso[task.setvariable variable=apiVersion;isOutput=true]$(csproj_Project_PropertyGroup_0_Version)'
        name: setApiVersion

    # ---
    # Update GitHub Pages hosted docs with latest master version
    # ---
    - deployment: github_pages
      displayName: Deploy Docs to GitHub Pages
      pool:
        vmImage: Ubuntu-16.04

      environment: github

      variables:
        - group: decsys_gh-pages

      strategy:
        runOnce:
          deploy:
            steps:
            # TODO: new download syntax
            - download: none
            - task: DownloadPipelineArtifact@1
              displayName: Fetch Docs artifact
              inputs:
                artifactName: docs
                downloadPath: $(System.DefaultWorkingDirectory)
            # commit the docs to a fresh git repo
            - script: |
                git init
                git config --local user.name "Azure Pipelines"
                git config --local user.email "azuredevops@microsoft.com"
                git add .
                git commit -m "latest docs"
            # get the ssh key we'll use to push
            - task: InstallSSHKey@0
              inputs:
                knownHostsEntry: $(githubKnownHosts)
                sshPublicKey: $(githubPublicKey)
                sshKeySecureFile: decsys_gh-pages
            # force push what we have to gh-pages
            - script: |
                git remote add origin git@github.com:decsys/decsys.git
                git push origin HEAD:gh-pages -f
    # ---
    # Create a Draft GitHub Release, with assets
    # ---
    - deployment: github_release
      displayName: Draft Github Release
      pool:
        vmImage: Ubuntu-16.04

      dependsOn: load_metadata

      environment: github

      variables:
        buildVersion: $[ dependencies.load_metadata.outputs['setApiVersion.apiVersion'] ]

      strategy:
        runOnce:
          deploy:
            steps:
            # artifact acquisition
            # TODO: new download syntax
            - download: none
            - task: DownloadPipelineArtifact@1
              displayName: Fetch dotnet artifact
              inputs:
                artifactName: dotnet
                downloadPath: $(System.ArtifactsDirectory)/dotnet
            - task: DownloadPipelineArtifact@1
              displayName: Fetch win-x64 artifact
              inputs:
                artifactName: win-x64
                downloadPath: $(System.ArtifactsDirectory)/win-x64

            # artifact archiving
            - task: ArchiveFiles@2
              displayName: Zip dotnet artifact
              inputs:
                rootFolderOrFile: $(System.ArtifactsDirectory)/dotnet
                includeRootFolder: false
                archiveFile: $(Build.BinariesDirectory)/Decsys_$(buildVersion)_dotnet-2.2.zip
            - task: ArchiveFiles@2
              displayName: Zip win-x64 artifact
              inputs:
                rootFolderOrFile: $(System.ArtifactsDirectory)/win-x64
                includeRootFolder: false
                archiveFile: $(Build.BinariesDirectory)/Decsys_$(buildVersion)_win-x64.zip

            # Publish Draft GitHub Release
            - task: GitHubRelease@0
              inputs:
                gitHubConnection: decsys-pipelines
                repositoryName: decsys/decsys
                action: create
                tagSource: manual
                tag: $(buildVersion)
                releaseNotesSource: input
                releaseNotes: "`// TODO`"
                isDraft: true
                assets: $(Build.BinariesDirectory)/*.zip